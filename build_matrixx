#!/bin/bash

# SPDX-FileCopyrightText: 2024 Edrick Sinsuan
# SPDX-License-Identifier: Apache-2.0

script_dir=$(dirname $0)
if ! check_file "$script_dir/setup_env"; then
    decho "setup_env must be present in $script_dir!"
    exit_timestamp 1
fi
source $script_dir/setup_env

build_init

# Matrixx directories
readonly ROM_NAME="matrixx"
readonly ROM_DIR="$(pwd)"

if [[ -z $(echo $ROM_DIR | grep -i $ROM_NAME | grep -vi "${ROM_NAME}/") ]]; then
    decho "You are not in the right directory."
    exit_timestamp 1
fi

# Default properties
WITH_GMS=false
build_device=dumpling
build_type=user

#
# Build functions
#

matrixx_build() {
    local target_device=$1

    cleanup_out $target_device
    decho "Building Matrixx: $target_device - $build_type WITH_GMS=$WITH_GMS"

    cleanup_path
    source build/envsetup.sh
    export WITH_GMS
    lunch lineage_$target_device-ap2a-$build_type
    m installclean
    brunch lineage_$target_device-ap2a-$build_type -j$(nproc --all)
    restore_path

    rom_copy_and_clean "Matrixx" $target_device $build_type
}

matrixx_build_gms() {
    WITH_GMS=true
    matrixx_build "$@"
}

matrixx_build_vanilla() {
    WITH_GMS=false
    matrixx_build "$@"
}

matrixx_build_both() {
    matrixx_build_gms "$@"
    matrixx_build_vanilla "$@"
}

param_func() {
    while [[ $# -gt 0 ]]
        do
        key="$1"

        case $key in
            -d|--device)
                if check_valid "$2"; then
                    build_device="$2"
                    shift
                fi
            ;;            
            -t|--type)
                if check_valid "$2"; then
                    build_type="$2"
                    shift
                fi
            ;;
            -g|--google)
                WITH_GMS=true
            ;;
            -a|--all)
                build_all=y
            ;;
            -s|--sign)
                keysdir="$ROM_DIR/vendor/lineage-priv/keys/"
                if [[ ! -z $(ls $keysdir | grep -i com.android) ]]; then
                    build_cmd=sb
                else
                    decho "No apex keys found, will not sign apex."
                fi
            ;;
        esac
        shift
    done
}

#
# Build start
#

param_func "$@"

if [[ $build_all == "y" ]]; then
    for device in ${devices_list[@]}; do
        matrixx_build_both $device
    done
    exit_timestamp 0
fi

matrixx_build $build_device

exit_timestamp 0