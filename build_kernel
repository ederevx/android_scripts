#!/bin/bash

# SPDX-FileCopyrightText: 2024 Edrick Sinsuan
# SPDX-License-Identifier: Apache-2.0

source setup_env

# Kernel directories
KERNEL_PARENT_DIR=$HOME/kernel
SRC_DIR=$KERNEL_PARENT_DIR
OUT_DIR=$KERNEL_PARENT_DIR/output
TARGET_DIR=$KERNEL_PARENT_DIR/test
SRT_DIR=$KERNEL_PARENT_DIR/scripts
ZIP_DIR=$KERNEL_PARENT_DIR/zip
LOG_DIR=$KERNEL_PARENT_DIR/buildlog
CLANG_DIR=$KERNEL_PARENT_DIR/toolchain/clang
GCC_DIR=$KERNEL_PARENT_DIR/toolchain/gcc

# Default properties
TEST_BUILD=n
DEBUG=n

LOG=/dev/null
BRNCH_VER=$CURR_DATE
VER=1

JN=$(nproc)

# Build x-ft by default
SRCN="x-ft"

#
# Defined SRCN properties
#

define_x-ft() {
    if [[ $TEST_BUILD == "y" ]]; then
        DC="msm8998_oneplus_debug_android_defconfig"
    else
        DC="msm8998_oneplus_android_defconfig"
    fi
    AF="arch/arm64/configs"
    ARCH="arm64"
    SUBARCH=$ARCH
    LWIMG="Image.gz-dtb"

    CLANG_PATH="$CLANG_DIR/clang-r458507/bin"
    GCC_PATH="${GCC_DIR}64/bin:${GCC_DIR}32/bin"
    CC_PATH="$CLANG_PATH:$GCC_PATH"

    C64="aarch64-linux-gnu-"
    C32="arm-linux-gnueabi-"
    CC="${C64}gcc"

    USE_CLANG=y
    export PATH="/usr/local/bin:$CC_PATH:$PATH"
}

define_wsl2() {
    DCF="config-wsl-x86"
    AF="arch/x86/configs"
    DC="KCONFIG_CONFIG=$AF/$DCF"
    ARCH="x86"
    LWIMG="bzImage"

    # WSL directory (windows and linux) for wsl2-kernel
    WSLKDIRW='C:\\Users\\evcsi\\WSL\\'
    WSLKDIRL=$C_USER_DIR/WSL

    USE_CLANG=y
    export PATH="/usr/lib/ccache:$PATH"
}

check_srcn() {
    if [[ $SRCN == "x-ft" ]]; then
        define_x-ft
        return 0
    fi

    if [[ $SRCN == "wsl2-kernel" ]]; then
        define_wsl2
        return 0
    fi

    return 1
}

#
# Build functions
#

define_log() {
    create_dir "$LOG_DIR"

    if ! check_file "$LOG"; then
        touch "$LOG_DIR/$KNAME.log"
    else
        echo "" > $LOG
    fi

    decho "Build start: $DATE_FULL" >> $LOG
    LOG="$LOG_DIR/$KNAME.log"
    {
        border
        echo "Last Commit:"
        echo $(git -C $SRC_DIR log -1 --pretty=%B)
        border
    } >> $LOG
}

define_kname() {
    KHASH=$(git rev-parse --short HEAD)
    KNAME="$USERHOST-$SRCN-$SRC_BRNCH-$BRNCH_VER-$VER"
    KNAME_S="$SRCN-$BRNCH_VER-$VER"
}

define_clang() {
    CC="clang"

    CLANGMKP=" \
        LLVM=1 \
        LLVM_IAS=1 \
        "
}

define_debug() {
    DEBUGMKP="    \
        CONFIG_DEBUG_SECTION_MISMATCH=y \
        "
}

define_env() {
    border
    if [[ $SRC_BRNCH != "" ]]; then
        echo "Checking out to branch:"
        git checkout $SRC_BRNCH
    else
        echo "Using current branch:"
        SRC_BRNCH="$(git rev-parse --abbrev-ref HEAD)"
    fi
    echo $SRC_BRNCH
    border

    OUT=$OUT_DIR/$SRCN/$SRC_BRNCH
    BTI=$OUT/arch/$ARCH/boot

    define_kname

    if [[ $FORCE_VER != "y" ]]; then
        while [[ -f $LOG_DIR/$KNAME.log ]]
            do
            VER="$(($VER + 1))"
            define_kname
        done
    fi

    if [[ $CONFIGURE == "y" ]]; then
        echo "Configure only, no builds will be made..."
    else
        LOG=$LOG_DIR/$KNAME.log
        define_log
    fi

    if [[ $USE_CLANG == "y" ]]; then
        define_clang
    fi

    if [[ $DEBUG == "y" ]]; then
        define_debug
    fi

    local compiler="$($CC --version | head -1)"
    decho_log "Compiler being used: $compiler"

    BUILD_STR="$SRCN release: $SRC_BRNCH-$BRNCH_VER-$VER built using $compiler | \
        Date: $DATE_FULL | Hash: $KHASH"

    MKP=" \
        $CLANGMKP \
        $DEBUGMKP \
        CC_WRAPPER=ccache \
        ARCH=$ARCH \
        SUBARCH=$SUBARCH \
        CROSS_COMPILE=$C64 \
        CROSS_COMPILE_ARM32=$C32 \
        LOCALVERSION=-$KNAME_S \
        O=$OUT \
        -j$JN \
        "

    if [[ $SRCN == "wsl2-kernel" ]]; then
        MKP=" \
            $CLANGMKP \
            $DEBUGMKP \
            LOCALVERSION=-$KNAME_S \
            O=$OUT \
            -j$JN \
            "
    fi

    decho "Make variables: $MKP" >> $LOG
}

build_func() {
    cd $SRC_DIR

    define_env

    if create_dir "$OUT"; then
        time make_cmd clean
        time make_cmd mrproper 
    fi

    if [[ $CONFIGURE == "y" ]]; then
        time make_cmd $DC menuconfig
        if [[ $SRCN == "wsl2-kernel" ]]; then
            DC=$DCF
        fi
        cp -v $OUT/.config $SRC_DIR/$AF/$DC
        decho "Copied .config to $DC"
        exit_timestamp 0
    fi

    time make_cmd $DC

    if [[ $SRCN == "wsl2-kernel" ]]; then
        return
    fi

    if [[ $MAKE_ONLY == "y" ]]; then
        decho_log "Done generating .config at $OUT"
        code $OUT/.config
        exit_timestamp 0
    fi

    time make_cmd
}

export_img_wsl2() {
    decho "Copying $BTI/$LWIMG to $C_USER_DIR/WSL"
    cp $BTI/$LWIMG $WSLKDIRL/$KNAME_S 

    decho "Updating kernel in .wslconfig"
    sed -i '/kernel=/d' $C_USER_DIR/.wslconfig
    echo "kernel=$WSLKDIRW$KNAME_S" >> $C_USER_DIR/.wslconfig
    cat $C_USER_DIR/.wslconfig
}

export_img_zip() {
    if ! check_dir "$ZIP_DIR" || ! cd "$ZIP_DIR"; then
        decho_log "There's no zip directory, abort!"
        exit_timestamp 1
    fi

    create_dir $TARGET_DIR

    mv -f $BTI/$LWIMG $ZIP_DIR
    touch version

    {
        echo "Kernel: $SRCN by $USERHOST"
        echo "Build code: $SRC_BRNCH-$BRNCH_VER-$VER"
        echo "Date: $DATE_FULL"
        echo "Hash: $KHASH"
    } >> version

    zip_image $TARGET_DIR/$KNAME
    create_dir $SHARED_TEST_DIR/builds
    cp $TARGET_DIR/$KNAME.zip $SHARED_TEST_DIR/builds/

    rm -f $LWIMG
    rm -f version
}

export_img() {
    if [[ $SRCN == "wsl2-kernel" ]]; then
        export_img_wsl2
        return 0
    fi

    # Set kernel zipping as default
    export_img_zip
    return 0
}

main_func() {
    if ! check_dir $SRC_DIR; then
        decho_log "Abort, source directory must exist."
        exit_timestamp 1
    fi

    build_func

    if check_file "$BTI/$LWIMG"; then
        export_img
    fi

    decho "$BUILD_STR"
    create_dir $SHARED_TEST_DIR/logs
    cp $LOG $SHARED_TEST_DIR/logs/
}

param_func() {
    while [[ $# -gt 0 ]]
        do
        key="$1"

        case $key in
            -s|--source)
                if check_valid "$2"; then
                    SRCN="$2"
                    shift
                fi
            ;;
            -b|--branch)
                if check_valid "$2"; then
                    SRC_BRNCH="$2"
                    shift
                fi
            ;;
            -v|--version)
                if check_valid "$2"; then
                    FORCE_VER=y
                    VER="$2"
                    shift
                fi
            ;;
            -cl|--clang)
                USE_CLANG=y
            ;;
            -a|--all)
                BUILD_ALL=y
            ;;
            -c|--configure)
                CONFIGURE=y
            ;;
            -t|--test)
                TEST_BUILD=y
            ;;
            -d|--debug)
                DEBUG=y
            ;;
            -mo|--make-only)
                MAKE_ONLY=y
            ;;
        esac
        shift
    done
}

param_main_func() {
    param_func "$@"
    main_func
}

#
# Build start
#

decho "Executing build script..."

param_func "$@"

if check_srcn; then
    SRC_DIR=$SRC_DIR/$SRCN
    main_func
    exit_timestamp 0
fi

decho "SRCN=$SRCN is unknown, please define in $0!"

exit_timestamp 1
