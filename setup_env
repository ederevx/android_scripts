#!/bin/bash

# SPDX-FileCopyrightText: 2024 Edrick Sinsuan
# SPDX-License-Identifier: Apache-2.0

# Clone the script repo to ~/scripts and repo to ~/repo/bin
export PATH=$PATH:~/scripts:~/repo/bin

# Update hwclock prior to executing scripts
sudo hwclock -s

# Identifier
USERHOST=$(whoami)

# Environment directories
C_USER_DIR=/mnt/c/Users/evcsi
SHARED_TEST_DIR=$C_USER_DIR/WSL-Shared

# Git properties
CURR_DATE=$(date +'%Y%m%d')
DATE_FULL=$(date -R)
AUTH_STR="$(git config --get user.name) <$(git config --get user.email)>"

#
# Utility functions
#

border() {
    for ((i = 0; i < 50; i++)); do
        printf -
    done
    echo ""
}

decho() {
    border
    echo "$1"
    border
}

decho_log() {
    decho "$1"
    decho "$1" >> $LOG
}

check_dir() {
    if [[ ! -d "$1" ]]; then 
        decho "Can't find $1"
        return 1
    else
        return 0
    fi
}

check_file() {
    if [[ ! -f "$1" ]]; then 
        decho "Can't find $1"
        return 1
    else
        return 0
    fi
}

create_dir() {
    if ! check_dir "$1"; then
        mkdir -p $1
        return 1
    else
        return 0
    fi
}

update_repo() {
    if ! check_dir "$1/.git" || ! cd "$1"; then
        return 
    fi

    decho "Updating $1 repository..."

    if [[ $1 == "$ZIP_DIR" ]]; then
        git pull --no-rebase upstream master
        git merge FETCH_HEAD
    fi

    git pull --ff-only
}

update_linux() {
    decho "Updating applications and binaries..."
    sudo apt-get update
    sudo apt-get upgrade
    sudo apt-get dist-upgrade
    sudo apt-get autoremove
    sudo apt-get clean
}

check_valid() {
    if [[ ${1:0:1} != "-" ]] && [[ $1 != "" ]]; then
        return 0
    else
        return 1
    fi
}

commit_repo() {
    if ! check_dir "$1/.git" || ! cd "$1"; then
        return 
    fi

    decho "Commiting in $1 repository..."

    C_CMD=""
    AUTH_STR_OVRID="$AUTH_STR"
    while [[ $# -gt 0 ]]
        do
        key="$1"

        case $key in
            -a|--add)
                git add -A
            ;;
            --author)
                if check_valid "$2"; then
                    AUTH_STR_OVRID="$2"
                    shift
                fi
            ;;
            -m|--message)
                if check_valid "$2"; then
                    C_MSG="$2"
                    shift
                fi
            ;;
            -e|--edit)
                C_CMD="-e $C_CMD"
            ;;
        esac
        shift
    done

    git commit $C_CMD -s -m "$C_MSG" --author="$AUTH_STR_OVRID" --date="$DATE_FULL"
}

make_cmd() {
    decho_log "Executing make $1..."
    make $MKP "$@" 2>> $LOG
}

zip_image() {
    decho_log "Zipping the image..."
    zip -r9 $1.zip * -x .git README.md 2>> $LOG
}

exit_timestamp() {
    decho "$(date -R)"
    exit $1
}