#!/bin/bash

# SPDX-FileCopyrightText: 2024 Edrick Sinsuan
# SPDX-License-Identifier: Apache-2.0

# Environment init functions
ederevx_init() {
    local script_dir=~/scripts
    local script_path=$script_dir/setup_env

    # Clone the script repo to ~/scripts and repo to ~/repo/bin
    if [[ -z $(echo $PATH | grep -i $script_dir) ]]; then
        export PATH=$PATH:$script_dir:~/repo/bin
    fi

    # Execute this script at bash init
    local bashrc=~/.bashrc
    if [[ -z $(cat $bashrc | grep -i setup_env) ]]; then
        echo "source $script_path" >> $bashrc
    fi

    # Setup nopasswd rule for calling commonly used commands
    local setup_env_sudo=/etc/sudoers.d/setup_env
    if ! check_file $setup_env_sudo; then
        {
            echo "$userhost ALL=(ALL:ALL) NOPASSWD: /usr/sbin/hwclock -s"
            echo "$userhost ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt-get"
        } | sudo tee $setup_env_sudo
        decho $setup_env_sudo
        cat $setup_env_sudo
    fi

    local kname=$(uname -r)
    if [[ ! -z $(echo $kname | grep -i wsl) ]]; then
        # Update hwclock prior to executing scripts
        sudo hwclock -s

        # Only execute the following at session init
        if [[ ! -z $(echo $0 | grep -i bash) ]]; then
            decho "Current kernel: $kname"
            update_linux
        fi
    fi
}

env_init() {
    # Identifier
    userhost=$(whoami)

    if [[ $userhost == "ederevx" ]]; then
        ederevx_init
    fi

    # Environment directories
    readonly C_USER_DIR=/mnt/c/Users/evcsi
    readonly SHARED_TEST_DIR=$C_USER_DIR/WSL-Shared
    readonly SHARED_ROMS_DIR="$SHARED_TEST_DIR/roms"
    shared_cp_rom=false

    readonly ROM_PRODUCT_DIR="out/target/product"
    readonly ROM_COMMON_DIR="$ROM_PRODUCT_DIR/msm8998-common"

    # Common variables
    devices_list=(
        "dumpling"
        "cheeseburger"
    )

    # Git properties
    curr_date=$(date +'%Y%m%d')
    date_full=$(date -R)
    auth_str="$(git config --get user.name) <$(git config --get user.email)>"

    decho $date_full
}

#
# Utility functions
#

border() {
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

decho() {
    border
    echo "$@"
    border
}

decho_log() {
    decho "$@"
    decho "$@" >> $log
}

check_dir() {
    if [ ! -d "$@" ]; then 
        decho "Can't find $@"
        return 1
    else
        return 0
    fi
}

check_file() {
    if [ ! -f "$@" ]; then 
        decho "Can't find $@"
        return 1
    else
        return 0
    fi
}

create_dir() {
    if ! check_dir "$@"; then
        mkdir -p $@
        return 1
    else
        return 0
    fi
}

pause_script() {
    border
    read -p "Press enter to continue"
    border
}

update_repo() {
    if ! check_dir "$@/.git" || ! cd "$@"; then
        return 
    fi

    decho "Updating $@ repository..."

    if [[ $1 == "$ZIP_DIR" ]]; then
        git pull --no-rebase upstream master
        git merge FETCH_HEAD
    fi

    git pull --ff-only
}

update_linux() {
    decho "Updating applications and binaries..."
    sudo apt-get update
    sudo apt-get upgrade
    sudo apt-get dist-upgrade
    sudo apt-get autoremove
    sudo apt-get clean
}

check_valid() {
    if [[ ${1:0:1} != "-" ]] && [[ $1 != "" ]]; then
        return 0
    else
        return 1
    fi
}

commit_repo() {
    if ! check_dir "$1/.git" || ! cd "$1"; then
        return 
    fi

    decho "Commiting in $1 repository..."

    c_cmd=""
    auth_str_ovrid="$auth_str"
    while [[ $# -gt 0 ]]
        do
        key="$1"

        case $key in
            -a|--add)
                git add -A
            ;;
            --author)
                if check_valid "$2"; then
                    auth_str_ovrid="$2"
                    shift
                fi
            ;;
            -m|--message)
                if check_valid "$2"; then
                    c_msg="$2"
                    shift
                fi
            ;;
            -e|--edit)
                c_cmd="-e $c_cmd"
            ;;
        esac
        shift
    done

    git commit $c_cmd -s -m "$c_msg" --author="$auth_str_ovrid" --date="$date_full"
}

make_cmd() {
    decho_log "Executing make $1..."
    make $mkp "$@" 2>> $log
}

zip_image() {
    decho_log "Zipping the image..."
    zip -r9 $1.zip * -x .git README.md 2>> $log
}

rom_copy_target() {
    local romname=$1
    local device=$2
    local type=$3

    local rom_product="$ROM_DIR/$ROM_PRODUCT_DIR"
    local rom_common="$ROM_DIR/$ROM_COMMON_DIR"
    local rom_target="$rom_product/$device/$romname"

    local target_dir

    if check_file $rom_target*.zip; then
        target_dir="$rom_common/$type"
        create_dir "$target_dir"
        decho "Copying $rom_target*.zip to $target_dir"
        cp $rom_target*.zip* $target_dir
        if [[ $shared_cp_rom == "true" ]]; then
            shared_cp_rom=false
            target_dir="$SHARED_ROMS_DIR/$type"
            decho "Copying $rom_target*.zip to $target_dir"
            create_dir "$target_dir"
            cp $rom_target*.zip $target_dir
        fi
        # Cleanup afterwards to prevent overlapping builds
        rm -f $rom_target*.zip*
    fi
}

exit_timestamp() {
    decho "$(date -R)"
    exit $1
}

# Initialize environment after functions init
env_init